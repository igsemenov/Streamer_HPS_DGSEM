###############################################################################
" pycode_dgs_flux "
###############################################################################
import numpy as np
import matplotlib.pyplot as plt
#------------------------------------------------------------------------------
import pylib_lgn as lg
import pylib_dgs as dg
###############################################################################
"""

This script implements the DGSEM scheme for solving a one-dimensional 
advection-diffusion equation (equation D.1 in the Appendix D).

The equation is solved on the interval [-pi,pi], the initial condition is
given as sin(x), the periodic boundary conditions are used at t>0.

"""
###############################################################################
"""
Input parameters:

    k: number of finite elements
    n: number of Gauss nodes per element

    a: advection velocity
    nu: diffusion coefficient  

    t: time step
    m: number of time steps

"""

k=64
n=6

a=-1.0
nu=0.0

t=2.5e-5
m=20000

###############################################################################

lgn=lg.lgn1d(n)

dgs=lg.dgs1d_lgn(lgn)
nod=lg.nod1d(0.,np.pi,k,lgn)

fld=dg.dgs_box1d(nod)

fld.f[0]=np.sin(nod.x)

fld.ax.fill(a)
fld.bx.fill(nu*fld.g)

###############################################################################

for j in range(m):

    fld.delta(0,t,dgs)
    fld.f[1]=fld.f[0]+fld.df

    fld.delta(1,t,dgs)
    fld.f[1]=(3.*fld.f[0]+fld.f[1]+fld.df)*0.25

    fld.delta(1,t,dgs)
    fld.f[0]=(fld.f[0]+2.*fld.f[1]+2.*fld.df)/3.

###############################################################################
"""

Output values:

    L1: the L-infinity error in the solution
    L2: the global L2 error in the solution

    x: 1D array that contains all discretization nodes
    f: 1D array that contanins the solution at the discretization nodes
    r: 1D array that contains the reference solution at the discretization nodes

"""

T=t*m

L1,L2=fld.get_error(fld.f[0]-np.sin(nod.x-a*T)*np.exp(-nu*T),lgn)

#------------------------------------------------------------------------------

x=nod.x.T.flatten()

f=fld.f[0].T.flatten()

r=np.sin(x-a*T)*np.exp(-nu*T)

###############################################################################
