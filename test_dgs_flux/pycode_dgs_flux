###############################################################################
" pycode_dgs_flux "
###############################################################################
import numpy as np
#------------------------------------------------------------------------------
import pylib_lgn as lg
import pylib_dgs as dg
###############################################################################
"""

"""
###############################################################################

n=6
m=64

a_=1.0
b_=0.0

t=2.5e-5
k=20000

###############################################################################

lgn=lg.lgn1d(n)

dgs=lg.dgs1d_lgn(lgn)
nod=lg.nod1d(0.,np.pi,m,lgn)

fld=dg.dgs_box1d(nod)

fld.f[0]=np.sin(nod.x)

fld.ax.fill(a_)
fld.bx.fill(b_*fld.g)

###############################################################################

for j in range(k):

    fld.delta(0,t,dgs)
    fld.f[1]=fld.f[0]+fld.df

    fld.delta(1,t,dgs)
    fld.f[1]=(3.*fld.f[0]+fld.f[1]+fld.df)*0.25

    fld.delta(1,t,dgs)
    fld.f[0]=(fld.f[0]+2.*fld.f[1]+2.*fld.df)/3.

###############################################################################

t_=t*k
r=np.sin(nod.x-a_*t_)*np.exp(-b_*t_)

L1,L2=fld.get_error(fld.f[0]-r,lgn)

print(L2)

#err1[m]=L1
#err2[m]=L2

###############################################################################
